{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\nimport queryString from \"query-string\";\nimport { isAuth, handleResponse } from \"./auth\";\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: _JSON$stringify(data)\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: _JSON$stringify(blog)\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: \"GET\"\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let removeBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    removeBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    removeBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${removeBlogEndpoint}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log(\"search params\", params); //will something like that {search='node'}\n\n  let query = queryString.stringify(params); //?limit=100&pagination=10\n\n  console.log(\"query params\", query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: \"GET\"\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const like = (userId, token, blogId) => {\n  return fetch(`${API}/blog/like`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: _JSON$stringify({\n      userId,\n      blogId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const unlike = (userId, token, blogId) => {\n  return fetch(`${API}/blog/unlike`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: _JSON$stringify({\n      userId,\n      blogId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const viewCount = blogId => {\n  return fetch(`${API}/view-counter`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: _JSON$stringify(views)\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/huirenchuah/Desktop/travelblog/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","removeBlog","removeBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query","stringify","like","userId","blogId","unlike","viewCount","views"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\nimport queryString from \"query-string\";\nimport { isAuth, handleResponse } from \"./auth\";\n\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n  let removeBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    removeBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    removeBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${removeBlogEndpoint}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const listSearch = params => {\n  console.log(\"search params\", params); //will something like that {search='node'}\n  let query = queryString.stringify(params); //?limit=100&pagination=10\n  console.log(\"query params\", query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const like = (userId, token, blogId) => {\n  return fetch(`${API}/blog/like`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ userId, blogId })\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const unlike = (userId, token, blogId) => {\n  return fetch(`${API}/blog/unlike`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({ userId, blogId })\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const viewCount = blogId => {\n  return fetch(`${API}/view-counter`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(views)\n  })\n    .then(response => {\n      handleResponse(response);\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}