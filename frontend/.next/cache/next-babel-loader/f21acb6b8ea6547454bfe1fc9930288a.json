{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nexport const createBlog = (blog, token) => {\n  let createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = `${API}/blog`;\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = `${API}/user/blog`;\n  }\n\n  return fetch(`${createBlogEndpoint}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify(data)\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify(blog)\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const list = username => {\n  let listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = `${API}/${username}/blogs`;\n  } else {\n    listBlogsEndpoint = `${API}/blogs`;\n  }\n\n  return fetch(`${listBlogsEndpoint}`, {\n    method: 'GET'\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const removeBlog = (slug, token) => {\n  let removeBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    removeBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    removeBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${removeBlogEndpoint}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const updateBlog = (blog, token, slug) => {\n  let updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = `${API}/blog/${slug}`;\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = `${API}/user/blog/${slug}`;\n  }\n\n  return fetch(`${updateBlogEndpoint}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const listSearch = params => {\n  console.log('search params', params); //will something like that {search='node'}\n\n  let query = queryString.stringify(params); //?limit=100&pagination=10\n\n  console.log('query params', query);\n  return fetch(`${API}/blogs/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    handleResponse(response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const like = (userId, token, blogId) => {\n  return fetch(`${API}/blog/like`, {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: _JSON$stringify({\n      userId,\n      blogId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const unlike = (userId, token, blogId) => {\n  return fetch(`${API}/blog/unlike`, {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    body: _JSON$stringify({\n      userId,\n      blogId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const views = blogId => {\n  return fetch(`${API}/views`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      blogId\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/Users/huirenchuah/Desktop/travelblog/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","catch","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","removeBlog","removeBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query","stringify","like","userId","blogId","unlike","views"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\n\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/user/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n    const data = {\n        limit,\n        skip\n    };\n    return fetch(`${API}/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const singleBlog = slug => {\n    return fetch(`${API}/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n    return fetch(`${API}/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const list = (username) => {\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/${username}/blogs`;\n    } else  {\n        listBlogsEndpoint = `${API}/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n    let removeBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        removeBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        removeBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${removeBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listSearch = params => {\n    console.log('search params', params); //will something like that {search='node'}\n    let query = queryString.stringify(params); //?limit=100&pagination=10\n    console.log('query params', query);\n    return fetch(`${API}/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const like =(userId, token, blogId)=>{\n    return fetch(`${API}/blog/like`,{\n        method:\"PUT\",\n        headers:{\n            Accept:'application/json',\n            'Content-Type': 'application/json',\n            Authorization:`Bearer ${token}`\n        },\n        body:JSON.stringify({userId, blogId})\n    })\n    .then(response=>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n}\n\n\nexport const unlike =(userId, token, blogId)=>{\n    return fetch(`${API}/blog/unlike`,{\n        method:\"PUT\",\n        headers:{\n            Accept:'application/json',\n            'Content-Type': 'application/json',\n            Authorization:`Bearer ${token}`\n        },\n        body:JSON.stringify({userId, blogId})\n    })\n    .then(response=>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n}\n\nexport const views = (blogId)=>{\n    return fetch (`${API}/views`,{\n        method:'PUT',\n        headers:{\n            Accept:'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({blogId})\n    })\n    .then(response=>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n}"]},"metadata":{},"sourceType":"module"}