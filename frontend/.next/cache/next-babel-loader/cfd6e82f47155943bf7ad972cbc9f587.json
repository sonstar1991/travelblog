{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\nexport var createBlog = function createBlog(blog, token) {\n  return fetch(\"\".concat(API, \"/blog\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/blogs-categories-tags\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: _JSON$stringify(data)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: \"GET\"\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: _JSON$stringify(blog)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list() {\n  return fetch(\"\".concat(API, \"/blogs\"), {\n    method: \"GET\"\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":{"version":3,"sources":["/Users/huirenchuah/Desktop/travelblog/frontend/actions/blog.js"],"names":["fetch","API","createBlog","blog","token","method","headers","Accept","Authorization","body","then","response","json","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","list","removeBlog","updateBlog"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-fetch\";\nimport { API } from \"../config\";\n\nexport const createBlog = (blog, token) => {\n  return fetch(`${API}/blog`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: blog\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n  const data = {\n    limit,\n    skip\n  };\n\n  return fetch(`${API}/blogs-categories-tags`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const singleBlog = slug => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n  return fetch(`${API}/blogs/related`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const list = () => {\n  return fetch(`${API}/blogs`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n  return fetch(`${API}/blog/${slug}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n      \n    }\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\n\n\n\nexport const updateBlog = (blog, token, slug) => {\n  return fetch(`${API}/blog/${slug}`, {\n      method: 'PUT',\n      headers: {\n          Accept: 'application/json',\n          Authorization: `Bearer ${token}`\n      },\n      body: blog\n  })\n      .then(response => {\n          return response.json();\n      })\n      .catch(err => console.log(err));\n};"]},"metadata":{},"sourceType":"module"}