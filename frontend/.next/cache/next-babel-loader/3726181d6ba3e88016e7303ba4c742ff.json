{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nexport var createBlog = function createBlog(blog, token) {\n  var createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = \"\".concat(API, \"/blog\");\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = \"\".concat(API, \"/user/blog\");\n  }\n\n  return fetch(\"\".concat(createBlogEndpoint), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify(data)\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify(blog)\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list(username) {\n  var listBlogsEndpoint;\n\n  if (username) {\n    listBlogsEndpoint = \"\".concat(API, \"/\").concat(username, \"/blogs\");\n  } else {\n    listBlogsEndpoint = \"\".concat(API, \"/blogs\");\n  }\n\n  return fetch(\"\".concat(listBlogsEndpoint), {\n    method: 'GET'\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  var removeBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    removeBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    removeBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(removeBlogEndpoint), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  var updateBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    updateBlogEndpoint = \"\".concat(API, \"/blog/\").concat(slug);\n  } else if (isAuth() && isAuth().role === 0) {\n    updateBlogEndpoint = \"\".concat(API, \"/user/blog/\").concat(slug);\n  }\n\n  return fetch(\"\".concat(updateBlogEndpoint), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listSearch = function listSearch(params) {\n  console.log('search params', params); //will something like that {search='node'}\n\n  var query = queryString.stringify(params); //?limit=100&pagination=10\n\n  console.log('query params', query);\n  return fetch(\"\".concat(API, \"/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    handleResponse(response);\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var like = function like(userId, token, blogId) {\n  return fetch(\"\".concat(API, \"/blog/like\"), {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: _JSON$stringify({\n      userId: userId,\n      blogId: blogId\n    })\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var unlike = function unlike(userId, token, blogId) {\n  return fetch(\"\".concat(API, \"/blog/unlike\"), {\n    method: \"PUT\",\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: _JSON$stringify({\n      userId: userId,\n      blogId: blogId\n    })\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n}; // export const views = ()=>{\n//     return fetch (`${API}/views`,{\n//         method:'PUT',\n//         headers:{\n//             Accept:'application/json',\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringigy({blogId})\n//     })\n//     .then(response=>{\n//         return response.json()\n//     })\n//     .catch\n// }","map":{"version":3,"sources":["/Users/huirenchuah/Desktop/travelblog/frontend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","singleBlog","slug","listRelated","list","username","listBlogsEndpoint","removeBlog","removeBlogEndpoint","updateBlog","updateBlogEndpoint","listSearch","params","query","stringify","like","userId","blogId","unlike"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\n\nexport const createBlog = (blog, token) => {\n    let createBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        createBlogEndpoint = `${API}/blog`;\n    } else if (isAuth() && isAuth().role === 0) {\n        createBlogEndpoint = `${API}/user/blog`;\n    }\n\n    return fetch(`${createBlogEndpoint}`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\n    const data = {\n        limit,\n        skip\n    };\n    return fetch(`${API}/blogs-categories-tags`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const singleBlog = slug => {\n    return fetch(`${API}/blog/${slug}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listRelated = blog => {\n    return fetch(`${API}/blogs/related`, {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(blog)\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const list = (username) => {\n    let listBlogsEndpoint;\n\n    if (username) {\n        listBlogsEndpoint = `${API}/${username}/blogs`;\n    } else  {\n        listBlogsEndpoint = `${API}/blogs`;\n    }\n\n    return fetch(`${listBlogsEndpoint}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const removeBlog = (slug, token) => {\n    let removeBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        removeBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        removeBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${removeBlogEndpoint}`, {\n        method: 'DELETE',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n        }\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const updateBlog = (blog, token, slug) => {\n    let updateBlogEndpoint;\n\n    if (isAuth() && isAuth().role === 1) {\n        updateBlogEndpoint = `${API}/blog/${slug}`;\n    } else if (isAuth() && isAuth().role === 0) {\n        updateBlogEndpoint = `${API}/user/blog/${slug}`;\n    }\n\n    return fetch(`${updateBlogEndpoint}`, {\n        method: 'PUT',\n        headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${token}`\n        },\n        body: blog\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\nexport const listSearch = params => {\n    console.log('search params', params); //will something like that {search='node'}\n    let query = queryString.stringify(params); //?limit=100&pagination=10\n    console.log('query params', query);\n    return fetch(`${API}/blogs/search?${query}`, {\n        method: 'GET'\n    })\n        .then(response => {\n            handleResponse(response)\n            return response.json();\n        })\n        .catch(err => console.log(err));\n};\n\n\nexport const like =(userId, token, blogId)=>{\n    return fetch(`${API}/blog/like`,{\n        method:\"PUT\",\n        headers:{\n            Accept:'application/json',\n            'Content-Type': 'application/json',\n            Authorization:`Bearer ${token}`\n        },\n        body:JSON.stringify({userId, blogId})\n    })\n    .then(response=>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n}\n\n\nexport const unlike =(userId, token, blogId)=>{\n    return fetch(`${API}/blog/unlike`,{\n        method:\"PUT\",\n        headers:{\n            Accept:'application/json',\n            'Content-Type': 'application/json',\n            Authorization:`Bearer ${token}`\n        },\n        body:JSON.stringify({userId, blogId})\n    })\n    .then(response=>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n}\n\n// export const views = ()=>{\n//     return fetch (`${API}/views`,{\n//         method:'PUT',\n//         headers:{\n//             Accept:'application/json',\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringigy({blogId})\n//     })\n//     .then(response=>{\n//         return response.json()\n//     })\n//     .catch\n// }"]},"metadata":{},"sourceType":"module"}